/*! SVG-Sequence-Diagram 2014-01-27 */
var LayoutEngine = function() {
    function a() {
        this.deviceWidth = 100, this.deviceHeight = 50, this.deviceSpacing = deviceWidth + 50, 
        this.messageSeperation = 40, this.textMessageOffsetSeparationX = 5, this.textMessageOffsetSeparationY = 5, 
        this.textIndent = 5;
    }
    return a.prototype.findDeviceStartPointFromIndex = function(a) {
        return a * this.deviceSpacing + this.deviceWidth / 2;
    }, a.prototype.getMessageHeight = function(a) {
        return this.messageSeperation * a + this.deviceHeight + this.messageSeperation;
    }, a.prototype.getMessageTextStartXPosition = function(a) {
        return this.findDeviceStartPointFromIndex(a) + this.textMessageOffsetSeparationX;
    }, a.prototype.getMessageTextStartYPosition = function(a) {
        return this.getMessageHeight(a) - this.textMessageOffsetSeparationY;
    }, a;
}(), deviceWidth = 100, deviceHeight = 50, deviceSpacing = deviceWidth + 50, messageSeperation = 40, textMessageOffsetSeparationX = 5, textMessageOffsetSeparationY = 5, textIndent = 5, engine = new LayoutEngine(), devices = [ {
    name: "CUCM"
}, {
    name: "SBC"
}, {
    name: "FS01"
}, {
    name: "CS2K"
} ], messages = [ {
    from: "CUCM",
    to: "SBC",
    message: "INVITE"
}, {
    from: "SBC",
    to: "FS01",
    message: "INVITE"
}, {
    from: "FS01",
    to: "SBC",
    message: "INVITE"
}, {
    from: "SBC",
    to: "CS2K",
    message: "INVITE"
} ], findDeviceIndex = function(a, b) {
    for (var c = 0; c < b.length; c++) {
        var d = b[c];
        if (d.name === a) return c;
    }
    return -1;
}, margin = {
    top: 10,
    right: 10,
    bottom: 10,
    left: 10
}, width = 960 - margin.left - margin.right, height = 500 - margin.top - margin.bottom, svg = d3.select("body").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

svg.append("defs").append("marker").attr("id", "arrowhead").attr("refX", 5).attr("refY", 5).attr("markerUnits", "strokeWidth").attr("markerWidth", 50).attr("markerHeight", 30).attr("orient", "auto").append("path").attr("d", "M 0 0 L 5 5 L 0 10 z");

var messages = svg.selectAll(".messages").data(messages).enter().append("g");

messages.append("svg:line").attr("stroke", "black").attr("marker-end", "url(#arrowhead)").attr("class", "messages").attr("x1", function(a) {
    return engine.findDeviceStartPointFromIndex(findDeviceIndex(a.from, devices));
}).attr("y1", function(a, b) {
    return engine.getMessageHeight(b);
}).attr("x2", function(a) {
    return engine.findDeviceStartPointFromIndex(findDeviceIndex(a.to, devices));
}).attr("y2", function(a, b) {
    return engine.getMessageHeight(b);
}), messages.append("text").attr("x", function(a) {
    return engine.getMessageTextStartXPosition(findDeviceIndex(a.from, devices));
}).attr("y", function(a, b) {
    return engine.getMessageTextStartYPosition(b);
}).text(function(a) {
    return a.message;
});

var devicesSVG = svg.selectAll(".devices").data(devices).enter().append("g");

devicesSVG.append("svg:rect").attr("x", function(a, b) {
    return deviceSpacing * b;
}).attr("y", 0).attr("width", deviceWidth).attr("fill", "none").attr("stroke", "black").attr("height", deviceHeight).attr("class", "devices").text(function(a) {
    return a.name;
}), devicesSVG.append("text").attr("x", function(a, b) {
    return deviceSpacing * b + textIndent;
}).attr("y", deviceHeight / 2).text(function(a) {
    return a.name;
}), devicesSVG.append("svg:line").attr("class", "devices").attr("fill", "none").attr("stroke", "black").attr("x1", function(a, b) {
    return deviceSpacing * b + deviceWidth / 2;
}).attr("y1", deviceHeight).attr("x2", function(a, b) {
    return deviceSpacing * b + deviceWidth / 2;
}).attr("y2", height);